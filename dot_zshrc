autoload -Uz compinit && compinit

if [[ ! -z "$(command -v hx)" ]]; then
  export EDITOR="hx"
else
  export EDITOR="vim"
fi
alias e="$EDITOR"

if [[ -d "$HOME/.zinit" ]]; then
  export ZINIT_HOME="$HOME/.zinit"
  source "${ZINIT_HOME}/zinit.zsh"

  zinit ice wait lucid

  zinit light zsh-users/zsh-syntax-highlighting
  zinit light zsh-users/zsh-autosuggestions
  zinit light joshskidmore/zsh-fzf-history-search

  zinit ice depth=1
  zinit light jeffreytse/zsh-vi-mode
else
  # Some fallback configs

  # Vi Mode
  bindkey -v
  bindkey ^R history-incremental-search-backward 
  bindkey ^S history-incremental-search-forward
fi

export PATH=$HOME/Library/Android/sdk/platform-tools:$HOME/go/bin:$HOME/.local/bin:/opt/homebrew/bin:$PATH
export LC_ALL="en_US.UTF-8"

if [[ ! -z "$(command -v lsd)" ]]; then
  alias ls="lsd"
  alias ll="lsd -l"
  alias lla="lsd -al"
else
  alias ll="ls -l"
  alias lla="ls -al"
fi

alias ezsh="e $HOME/.zshrc"
alias sozsh=". $HOME/.zshrc"
alias azsh="chezmoi add $HOME/.zshrc"

if [[ ! -z "$(command -v kubectl-check)" ]]; then
  alias k="kubectl check"
fi
alias ktx="kubectx"
alias kns="kubens"
alias ku="k9s"
alias kh="k9s --headless"

alias cdiff="chezmoi diff"
alias cadd="chezmoi add"
alias cupdate="chezmoi update"
alias cedit="chezmoi edit"
alias capply="chezmoi apply"

if [[ ! -z "$(command -v gh)" ]]; then
  alias prcm="gh pr create --assignee @me"
  alias prv="gh pr view"
  alias prvw="gh pr view -w"
  alias prm="gh pr merge"
  alias prmd="gh pr merge -d"
fi

alias gc="git commit"
alias gst="git status"
alias gp="git push"
alias gl="git pull"
alias gsw="git switch"
alias glp="git pull --rebase && git push"
alias ga="git add"
alias gco="git checkout"
alias gd="git diff"

alias zj="zellij"

function create_rc_pr() {
    branch=$(git branch --list master main | head -n 1 | awk '{print $1}')
    if [ -z "$branch" ]; then
        echo "Neither master nor main branch exists."
        return 1
    fi

    echo "Creating RC PR to branch: $branch"

    gh pr create --assignee @me --base $branch --title "RC" --body "RC $(date -u +%Y-%m-%dT%H:%M:%S)"
}
alias crcpr="create_rc_pr"

# gpc: git prefix commit
function gpc() {
  # 현재 브랜치 이름을 가져옵니다
  local branch_name=$(git rev-parse --abbrev-ref HEAD)

  # 브랜치 이름에서 <issue> 추출 (형식: #123 또는 ABC-1234)
  if [[ $branch_name =~ ([A-Z]+-[0-9]+|#[0-9]+) ]]; then
    local issue="${match[1]}"
  else
    echo "브랜치 이름에서 이슈 번호를 찾을 수 없습니다."
    return 1
  fi


  # 임시 파일을 사용하여 커밋 메시지를 작성
  local temp_file=$(mktemp /tmp/commit-msg.XXXXXX)

  # 이슈 번호를 커밋 메시지에 추가
  echo "[${issue}] " > $temp_file

  # git commit -v로 diff와 함께 편집기 열기
  git commit -v -e --file=$temp_file

  # 임시 파일 삭제
  rm -f $temp_file
}

if [[ ! -z "$(command -v starship)" ]]; then
  eval "$(starship init zsh)"
fi

if [[ -d "$HOME/.asdf" ]]; then
  . "$HOME/.asdf/asdf.sh"
fi

if [[ ! -z "$(command -v zoxide)" ]]; then
  eval "$(zoxide init zsh)"
else
  . $HOME/.scripts/z.sh
fi

if [[ ! -z "$(command -v carapace)" ]]; then
  export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense' # optional
  zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
  source <(carapace _carapace)
fi

if [[ ! -z "$(command -v direnv)" ]]; then
  eval "$(direnv hook zsh)"
fi
